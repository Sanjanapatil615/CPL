#include <iostream>
#include <vector>
#include <algorithm>
#include <climits>

using namespace std;

// Precompute powers of 2 up to 10000 for efficiency
vector<long long> pow2(10001, 1);

int main() {
    // Precompute powers of 2
    for (int i = 1; i <= 10000; ++i) {
        pow2[i] = pow2[i - 1] * 2;
    }

    // Precompute minimum moves for all N up to 10000
    vector<long long> dp(10001, LLONG_MAX);
    dp[0] = 0;

    for (int n = 1; n <= 10000; ++n) {
        dp[n] = pow2[n] - 1; // 3-peg classic Hanoi solution as upper bound
        for (int k = 1; k < n; ++k) {
            dp[n] = min(dp[n], 2 * dp[k] + pow2[n - k] - 1);
        }
    }

    int N;
    while (cin >> N) {
        cout << dp[N] << endl;
    }

    return 0;
}



 /* output:

Sample Input
1
2
28
64
Sample Output
1
3
769
18433

