#include <iostream>
#include <vector>
#include <string>
#include <sstream>
#include <algorithm>
#include <iomanip>

using namespace std;

const int DAY_START = 600;  // 10:00 in minutes
const int DAY_END = 1080;   // 18:00 in minutes

struct Interval {
    int start;
    int end;
};

int toMinutes(const string& time) {
    int hours = stoi(time.substr(0, 2));
    int minutes = stoi(time.substr(3, 2));
    return hours * 60 + minutes;
}

string toTime(int minutes) {
    int h = minutes / 60;
    int m = minutes % 60;
    ostringstream oss;
    oss << setw(2) << setfill('0') << h << ":" << setw(2) << setfill('0') << m;
    return oss.str();
}

int main() {
    string line;
    int day = 1;

    while (getline(cin, line)) {
        if (line.empty()) continue;

        int s = stoi(line);
        vector<Interval> appointments;

        for (int i = 0; i < s; ++i) {
            getline(cin, line);
            string startTime = line.substr(0, 5);
            string endTime = line.substr(6, 5);
            int start = toMinutes(startTime);
            int end = toMinutes(endTime);
            appointments.push_back({start, end});
        }

        // Sort appointments by start time
        sort(appointments.begin(), appointments.end(), [](Interval a, Interval b) {
            return a.start < b.start;
        });

        // Merge overlapping or adjacent appointments
        vector<Interval> merged;
        for (const auto& appt : appointments) {
            if (merged.empty() || merged.back().end < appt.start) {
                merged.push_back(appt);
            } else {
                merged.back().end = max(merged.back().end, appt.end);
            }
        }

        // Add boundaries for the start and end of the day
        merged.insert(merged.begin(), {DAY_START, DAY_START});
        merged.push_back({DAY_END, DAY_END});

        // Find longest nap
        int maxNap = 0;
        int napStart = 0;
        for (size_t i = 1; i < merged.size(); ++i) {
            int gap = merged[i].start - merged[i - 1].end;
            if (gap > maxNap) {
                maxNap = gap;
                napStart = merged[i - 1].end;
            }
        }

        cout << "Day #" << day++ << ": the longest nap starts at " << toTime(napStart)
             << " and will last for ";

        if (maxNap >= 60) {
            cout << maxNap / 60 << " hours and " << maxNap % 60 << " minutes." << endl;
        } else {
            cout << maxNap << " minutes." << endl;
        }
    }

    return 0;
}


/*
Sample Input
4
10:00 12:00 Lectures
12:00 13:00 Lunch, like always.
13:00 15:00 Boring lectures...
15:30 17:45 Reading
4
10:00 12:00 Lectures
12:00 13:00 Lunch, just lunch.
13:00 15:00 Lectures, lectures... oh, no!
16:45 17:45 Reading (to be or not to be?)
4
10:00 12:00 Lectures, as everyday.
12:00 13:00 Lunch, again!!!
13:00 15:00 Lectures, more lectures!
15:30 17:15 Reading (I love reading, but should I schedule it?)
1
12:00 13:00 I love lunch! Have you ever noticed it? :)
Sample Output
Day #1: the longest nap starts at 15:00 and will last for 30 minutes.
Day #2: the longest nap starts at 15:00 and will last for 1 hours and 45 minutes.
Day #3: the longest nap starts at 17:15 and will last for 45 minutes.
Day #4: the longest nap starts at 13:00 and will last for 5 hours and 0 minutes.
*/
